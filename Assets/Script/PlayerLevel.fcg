import "Playable.fcc" as Playable
import "Convert.fcc" as Convert
import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "./GlobalLevel.fcg" as GlobalLevel
import "Strings.fcc" as strings
import MyResources from "EditorGenLib.fcc"
import "./PlayerData.fcg" as PlayerData
import "./Enum.fcg" as Enum
import "./PlayerStat.fcg" as PlayerStat
import "List.fcc" as List
import "./PlayerDefaultHUD.fcg" as PlayerDefaultHUD
import "./PlayerLevelHUD.fcg" as PlayerLevelHUD
import "./PlayerSFX.fcg" as PlayerSFX
import Resources from "EditorGenLib.fcc"

graph PlayerLevel {
    _exp int
    _hasInit bool

    func InitPlayerLevel(){
        // Get data from data storage first if not there then init
        if(!_hasInit){
            _hasInit = true
        }
    }

    func BeginPlayerLevel(){
        InitPlayerLevel()
        thisEntity<PlayerLevelHUD>.DisplayLevelHUD()
    }

    func RunOnLevelUp(){
        ShowTips(thisEntity<Player>, "level up", ColorRGB(255, 255, 255), 3000)   
        thisEntity<PlayerSFX>.PlaySFXOnce(SoundEffects.Horn)
        start thisEntity<PlayerLevelHUD>.ActivateLevelUpHUDProtocol()
        start StartLevelUpVFX()        
    }

    async func StartLevelUpVFX(){
        CreateFromPrefab(out var createdPrefab, Resources.Prefab[EResource_Prefab.LEVEL_UP])
        CreateFollow(createdPrefab, thisEntity<Player>, Vector3{0,0,0}, CoordinateType.WorldPosition, out var createdFollowing)
        Play(createdFollowing, false)
        WaitForSeconds(3000)
        Pause(createdFollowing)
        DeleteEntity(createdFollowing)
        DeleteEntity(createdPrefab)
    }

    func IncreaseExpByAmount(amount int){
        var lvlBefore = GetLvl()

        LogInfo("[PlayerLevel] Level up: " + amount)
        _exp += amount

        if(_exp > globalEntity<GlobalLevel>.GetMaxExpRequired()){
            ShowTips(thisEntity<Player>, MyResources.Localizations["LEVEL_MAX_EXP"], ColorRGB(255, 255, 255), 3000)

            _exp = globalEntity<GlobalLevel>.GetMaxExpRequired()
        }

        var lvlAfter = GetLvl()

        if(lvlAfter - lvlBefore != 0){
            RunOnLevelUp()
        }

        thisEntity<PlayerStat>.ResetPlayerStat()
        thisEntity<PlayerDefaultHUD>.UpdatePlayerHeadHUD()
        thisEntity<PlayerLevelHUD>.ResetLevelHUD()
        start thisEntity<PlayerData>.WriteData()    
    }

    func DecreaseExpByAmount(amount int){
        _exp -= amount

        if(_exp < globalEntity<GlobalLevel>.EXP_MIN){
            _exp = globalEntity<GlobalLevel>.EXP_MIN
        }
        thisEntity<PlayerStat>.UpdateRemainingStatPoint()
        thisEntity<PlayerDefaultHUD>.UpdatePlayerHeadHUD()
        thisEntity<PlayerLevelHUD>.ResetLevelHUD()
    }
    
    func GetExp() int{
        return _exp
    }

    func GetLvl() int{
        var levelList = globalEntity<GlobalLevel>.GetLevelList()
        // LogInfo("[PlayerLevel] number of level: " + List.Length(levelList) + " "  + levelList)
        var currentLevel = 0

        for i = 0, List.Length(levelList), 1{
            var level = levelList[i]
            var levelExpNeeded = globalEntity<GlobalLevel>.GetLevelExpRequirement(level)
            // LogInfo("[PlayerLevel] _exp: " + i + " " + _exp + " " + levelExpNeeded + " " + (_exp >= levelExpNeeded))
            if(_exp >= levelExpNeeded){
                currentLevel = level
            } else {
                break
            }

            // LogInfo("[PlayerLevel] Level up " + currentLevel)
        }
        LogInfo("[PlayerLevel] currentLevel: " + currentLevel)
        return currentLevel
    }

    func GetExpRequiredToNextLvl() int{
        var nextLevel = GetLvl() + 1
        var nextLevelNeedExp = globalEntity<GlobalLevel>.GetLevelExpRequirement(nextLevel)

        var requiredExp = 0

        LogInfo("[PlayerLevel] GetExpRequiredToNextLvl: " + requiredExp)
        return requiredExp
    }

    // For displaying exp from current level
    func GetExpFromCurrentLvl() int{
        var currentLevel = GetLvl()
        var currentLevelNeedExp = globalEntity<GlobalLevel>.GetLevelExpRequirement(currentLevel)
        var expFromCurrentLvl =  _exp - currentLevelNeedExp
        LogInfo("[PlayerLevel] GetExpFromCurrentLvl: " + expFromCurrentLvl)
        return expFromCurrentLvl
    }

    event Player_FinishAction(action string, data object) {        
        if (ToString(action) == ToString(Enum.ACTION_LOAD_DATA_SUCCESS)) {
            LogInfo("[PlayerLevel] LoadDataSuccess _exp = " + thisEntity<PlayerData>._exp)
            _exp = thisEntity<PlayerData>._exp
            thisEntity<PlayerLevelHUD>.DisplayLevelHUD()
        }
    }
}