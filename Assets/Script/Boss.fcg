import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "Combat.fcc" as combat
import "AI.fcc" as ai
import "./ZoneBossManager.fcg" as ZoneBossManager
import "./PlayerLevel.fcg" as PlayerLevel
import "./PlayerInventory.fcg" as PlayerInventory
import "./PlayerMoney.fcg" as PlayerMoney
import "./PlayerBossNotification.fcg" as PlayerBossNotification
import "./PlayerMenu.fcg" as PlayerMenu
import "./PlayerZoneSelectionHUD.fcg" as PlayerZoneSelectionHUD
import "./GlobalZoneBossManager.fcg" as GlobalZoneBossManager

graph Boss {
    _spawner entity<BossSpawner>
    _expAmount int
    _type int
    _damagePlayerList List<Player>

    event OnAwake() {
    
    }

    event OnTakeDamage(attacker entity<Entity>,
        damageType DamageType,
        value int,
        beDamagedPart HitBodyPart) {
    
    }

    event Boss_OnEliminated(bossEnum int) {
        LogInfo("[Boss] Boss is ded: " + bossEnum)
        _spawner<ZoneBossManager>.RemoveBossFromList(thisEntity<Entity>)    
        LogInfo("[Boss] IsBossOnField: " + globalEntity<GlobalZoneBossManager>.IsBossOnField())
        for key, player in GetAllPlayers(){
            _expAmount = 2500
            player<PlayerLevel>.IncreaseExpByAmount(_expAmount)
            player<PlayerMoney>.AddMoney(GameMoneyType.COIN, 1000)
            player<PlayerInventory>.IncreaseItemByAmount(MaterialEnum.ZOMBIE_ESSENCE, 100)
            player<PlayerInventory>.IncreaseItemByAmount(MaterialEnum.BOSS_ESSENCE, 2)
            player<PlayerBossNotification>.EndBossNotification()
            player<PlayerMenu>.UpdateBossNoti()
            player<PlayerZoneSelectionHUD>.UpdateZoneIcon()
            player<PlayerZoneSelectionHUD>.UpdateZoneTimer()
        }
    }

    func SetSpawner(spawner entity<BossSpawner>){
        _spawner = spawner
    }

    func SetBossType(bossType int){
        _type = bossType
    }

    func GetBossType() int{
        return _type
    }
}