import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "AI.fcc" as ai
import "Player.fcc" as player
import "Workflow.fcc" as workflow
import "Combat.fcc" as combat
import "LevelObject.fcc" as levelobject
import "Items.fcc" as items
import "List.fcc" as List
import "Physics.fcc" as Physics
import "Math.fcc" as Math

import Resources from "EditorGenLib.fcc"
import MyResources from "EditorGenLib.fcc"

import "./GlobalSpawn.fcg" as GlobalSpawn
import "./Global.fcg" as Global
import "./GlobalZoneBossManager.fcg" as GlobalZoneBossManager

import SpiderECA from "EditorGenLib.fcc"
import DragonECA from "EditorGenLib.fcc"
import BossBase from "EditorGenLib.fcc"
import "./Boss.fcg" as BossScript

import "./PlayerZoneSelectionHUD.fcg" as PlayerZoneSelectionHUD
import "./PlayerDefaultHUD.fcg" as PlayerDefaultHUD
import "./PlayerMenu.fcg" as PlayerMenu
import "./PlayerZoneSelection.fcg" as PlayerZoneSelection
import "./PlayerCraftlandToken.fcg" as PlayerCraftlandToken
import "./PlayerLevelHUD.fcg" as PlayerLevelHUD
import "./PlayerInventory.fcg" as PlayerInventory
import "./PlayerInventoryHUD.fcg" as PlayerInventoryHUD
import "./PlayerDebug.fcg" as PlayerDebug
import "./PlayerDebugHUD.fcg" as PlayerDebugHUD
import "./PlayerStatHUD.fcg" as PlayerStatHUD
import "./PlayerData.fcg" as PlayerData
import "./PlayerLevel.fcg" as PlayerLevel
import "./PlayerSkillHUD.fcg" as PlayerSkillHUD
import "./PlayerCrafting.fcg" as PlayerCrafting
import "./PlayerCraftHUD.fcg" as PlayerCraftHUD
import "./PlayerBossNotificationHUD.fcg" as PlayerBossNotificationHUD
import "./PlayerBossNotification.fcg" as PlayerBossNotification
import "./PlayerFarmSuggestionHUD.fcg" as PlayerFarmSuggestionHUD
import "./PlayerStorageHUD.fcg" as PlayerStorageHUD

graph Player {
    event Player_PlayerJoinGame() {
        start InitAllHUD() 
        thisEntity<PlayerDebug>.BeginPlayerDebug()
        thisEntity<PlayerMenu>.DisplayMenuHUD()
        thisEntity<PlayerCraftlandToken>.SetCraftlandTokenWalletHUD()
        thisEntity<PlayerInventory>.BeginPlayerInventorySystem()
        thisEntity<PlayerData>.LoadData()
        WaitForSeconds(500)
        Preload()
        // MyResources.SetHookGun()
        thisEntity<PlayerLevel>.BeginPlayerLevel()
        // thisEntity<PlayerDefaultHUD>.SetPlayerHeadHUD()
        globalEntity<Global>.UpdateAllPlayer()
        SetPlayerConfig()
    }

    event OnEquipWeapon(weapon entity<Weapon>) {
        GetEquipments(thisEntity<Player> as entity<Player>,EquipmentSlot.PrimaryWeapon1, out var primaryWeapon, out var attachmentlist)
        LogInfo("Primary Weapon 1: " + primaryWeapon<Weapon>.ItemID)
    }

    event Player_PlayerQuitGame() {
        start RunOnKilled()
    }
    
    event OnPhaseStart(phase entity<Phase>) {
        thisEntity<PlayerDefaultHUD>.SetCountdownTimerHUD(phase)
    }

    event OnBeKilled(attacker entity<Entity>,
      damageType DamageType,
      beDamagedPart HitBodyPart) {
        start RunOnKilled()
    }


    event Player_OnEnterBossZone(bossEnum int) {
        LogInfo("[Player] Enter Boss zone: " + bossEnum)
        thisEntity<PlayerBossNotification>.EndBossNotification() 
    }

    event Player_OnLeaveBossZone(bossEnum int) {
        LogInfo("[Player] Leave Boss zone: " + bossEnum)
        thisEntity<PlayerBossNotification>.BeginBossNotification()
    }

    // event OnTakeDamage(attacker entity<Entity>, damageType DamageType, value int, beDamagedPart HitBodyPart) {
    //     ShowTips(thisEntity as entity<Player>, "Damage: " + value, ColorRGB(255, 255, 255), 3000)
    // }

    // event OnDropWeapon(weapon entity<Weapon>) {
    //     LogInfo("drop weapon")
    //     DeleteResidualLevelObjects()
    // }

    async func InitAllHUD(){
        thisEntity<PlayerZoneSelectionHUD>.InitZoneSelectionHUD()
        WaitForSeconds(500)
        thisEntity<PlayerMenu>.InitMenuHUD()
        WaitForSeconds(500)
        thisEntity<PlayerLevelHUD>.InitLevelHUD()
        WaitForSeconds(500)
        thisEntity<PlayerInventoryHUD>.InitInventoryHUD()
        WaitForSeconds(500)
        thisEntity<PlayerDebugHUD>.InitDebugHUD()
        WaitForSeconds(500)
        thisEntity<PlayerStatHUD>.InitStatHUD()
        WaitForSeconds(500)
        thisEntity<PlayerSkillHUD>.InitSkillHUD()
        WaitForSeconds(500)
        thisEntity<PlayerBossNotificationHUD>.InitBossNotificationHUD()
        WaitForSeconds(500)
        thisEntity<PlayerStorageHUD>.InitPlayerStorageHUD()
        WaitForSeconds(500)
        thisEntity<PlayerCraftHUD>.InitCraftHUD()
        WaitForSeconds(500)
        thisEntity<PlayerFarmSuggestionHUD>.InitFarmSuggestionHUD()
    }

    func DeleteAllHUD(){
        thisEntity<PlayerZoneSelectionHUD>.DeleteZoneSelectionHUD()
        thisEntity<PlayerMenu>.DeleteMenuHUD()
        thisEntity<PlayerLevelHUD>.DeleteLevelHUD()
        thisEntity<PlayerInventoryHUD>.DeleteInventoryHUD()
        thisEntity<PlayerDebugHUD>.DeleteDebugHUD()
        thisEntity<PlayerStatHUD>.DeleteStatHUD()
        thisEntity<PlayerSkillHUD>.DeleteSkillHUD()
        thisEntity<PlayerBossNotificationHUD>.DeleteBossNotificationHUD()
        thisEntity<PlayerStorageHUD>.DeletePlayerStorageHUD()
        thisEntity<PlayerCraftHUD>.DeleteCraftHUD()
        thisEntity<PlayerFarmSuggestionHUD>.InitFarmSuggestionHUD()
    }

    async func Preload(){
        AddItemToPlayer(thisEntity<Player> as entity<Player>, ItemIDType.Bag3, 1, out var addedItemList)
        // AddItemToPlayer(thisEntity<Player> as entity<Player>, Resources.Item[EResource_Item.FlameGun] as ItemIDType, 1, out var addedItemList2)
        // AddItemToPlayer(thisEntity<Player> as entity<Player>, Resources.Item[EResource_Item.FlameGun] as ItemIDType, 1, out var addedItemList2)
        
        AddItemToPlayer(thisEntity<Player> as entity<Player>, ItemIDType.UZI, 1, out var addedItemLis)
        thisEntity<PlayerCrafting>.Craft(RecipeEnum.UZI)

    }

    func SetPlayerConfig() {
        // var thisPlayer = thisEntity as entity<Player>
        // thisEntity<Player>.DropItemDisabled = true
        // thisEntity<Player>.PickupItemDisabled = true
        // thisEntity<Player>.KnockDownState = KnockDownType.SkipKnockDown
    }

    async func RunOnKilled(){
        thisEntity<PlayerData>.WriteData()
        WaitForNextFrame()
        thisEntity<PlayerZoneSelection>.StopPlayerFromTeleporting()
        WaitForSeconds(5000)
        Revive(thisEntity<Player> as entity<Player>)
        WaitForNextFrame()
        thisEntity<PlayerZoneSelection>.SetSelectedZoneManually(ZoneEnum.BASE)
        thisEntity<PlayerZoneSelection>.ConfirmZoneSelection()
        globalEntity<Global>.UpdateAllPlayer()
        
        if(globalEntity<GlobalZoneBossManager>.IsBossOnField()){
            thisEntity<PlayerBossNotification>.BeginBossNotification()
        }
        var bossEntity = globalEntity<GlobalZoneBossManager>.GetCurrentBossEntity()
        var bossType = bossEntity<BossScript>.GetBossType()
        if(bossType == BossEnum.DRAGON){
            bossEntity<BossBase>.removePlayerInZone(thisEntity<Player> as entity<Player>)
        } else if (bossType == BossEnum.MECHANICAL_SPIDER){
            bossEntity<BossBase>.removePlayerInZone(thisEntity<Player> as entity<Player>)
        }
    }

}