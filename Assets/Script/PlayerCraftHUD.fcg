import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "Hud.fcc" as hud
import Resources from "EditorGenLib.fcc"
import MyResources from "EditorGenLib.fcc"

import "./HUDUtil.fcg" as HUDUtil
import "./GlobalCrafting.fcg" as GlobalCrafting
import "Items.fcc" as items
import "Math.fcc" as math
import "List.fcc" as List
import "./PlayerInventory.fcg" as PlayerInventory
import "./GlobalMaterial.fcg" as GlobalMaterial
import"./PlayerCrafting.fcg" as PlayerCrafting
import "Map.fcc" as Map
import "./PlayerArmory.fcg" as PlayerArmory

graph PlayerCraftingHUD {
    _craftHUD entity<CustomHud>
    _chosenWeapon string
    _unlockable bool
    _unlockableList List<string>


    func InitCraftHUD(){
        if(_craftHUD == nil){
            _craftHUD = HUDUtil.CreateCustomHUD(thisEntity<Player>, EResource_UI.CRAFTING, 5)
            _craftHUD<CustomHud>.Visibility = false
            SetWeaponCraftHUD(WeaponType.Rifle)
        }
    }

    func DisplayCraftHUD(){
        LogInfo("craftHUD" + _craftHUD)
        LogInfo("eresource" + EResource_UI.CRAFTING)
        LogInfo(Resources.UI_CRAFTING[EResource_UI.CRAFTING])
        InitCraftHUD()
        ReSetCraftHUD()
        if(!_craftHUD<CustomHud>.Visibility){
            _craftHUD<CustomHud>.Visibility = true
        }
    }

    func ReSetCraftHUD(){

    }

    func CloseCraftHUD(){
        if(_craftHUD != nil){
            _craftHUD<CustomHud>.Visibility = false
        }
    }

    func DeleteCraftHUD(){
        DeleteEntity(_craftHUD)
    }

    func GetCraftHUDWidget(eResourceUILevel string) entity<HudWidget>{
        return GetWidgetFromCustomHud(thisEntity<Player>, _craftHUD, Resources.UI_CRAFTING[eResourceUILevel])
    }

    func SetWeaponCraftHUD(weaponType WeaponType) {
        var recipeMap = globalEntity<GlobalCrafting>.GetRecipeMap()
        var gunChoiceControl = GetCraftHUDWidget(EResource_UI_CRAFTING.BTN_GUNCHOICE)
        var gunLayout = GetCraftHUDWidget(EResource_UI_CRAFTING.LAYOUT_GUN)

        // var SMGList = globalEntity<GlobalCrafting>.GetRecipeListByType(WeaponType.SubMachineGun)
        // var ARList = globalEntity<GlobalCrafting>.GetRecipeListByType(WeaponType.Rifle)
        // var ShotgunList = globalEntity<GlobalCrafting>.GetRecipeListByType(WeaponType.Shotgun)
        // var SniperList = globalEntity<GlobalCrafting>.GetRecipeListByType(WeaponType.Sniper)
        // var PistolList = globalEntity<GlobalCrafting>.GetRecipeListByType(WeaponType.Pistol)
        // var MeleeList = globalEntity<GlobalCrafting>.GetRecipeListByType(WeaponType.Melee)
        // var AttachmentList = globalEntity<GlobalCrafting>.GetAttachmentRecipeList()
        // var allList = List<string>{}
        var itemList = List<string>{}
        if weaponType == WeaponType.CG15 {
            itemList = globalEntity<GlobalCrafting>.GetAttachmentRecipeList()
        } else {
            itemList = globalEntity<GlobalCrafting>.GetRecipeListByType(weaponType)
        }
        

        // AppendRange(allList,SMGList)
        // AppendRange(allList,ARList)
        // AppendRange(allList,ShotgunList)
        // AppendRange(allList,SniperList)
        // AppendRange(allList,PistolList)
        // AppendRange(allList,MeleeList)
        // AppendRange(allList,AttachmentList)



        for key, gunChoice in GetChildren(gunLayout) {
            if key!=0 {
                DeleteEntity(gunChoice)
            } else {
                gunChoice<Entity>.TagsList = List<string>{}
            }
        }

        var editingGunChoice = gunChoiceControl

        var tierIndex = 0
        var imageIndex = 1
        var nameIndex = 2
        var typeIndex = 3

        var prevWeapon string
        
        for key, weapon in itemList {
            if key != 0 {  
                CloneEntity(out var clonedentity,editingGunChoice)
                editingGunChoice = clonedentity as entity<HudWidget>
                DeleteTag(editingGunChoice,prevWeapon)
            }
            var color = globalEntity<GlobalCrafting>.GetTierColor(recipeMap[weapon][tierIndex] as int) as Color
            editingGunChoice<HudButtonWidget>.Color = color
            // editingGunChoice<HudButtonWidget>.Alpha = 0.5
            var children = GetChildren(editingGunChoice)
            var image = children[0]
            var text = children[1]
            var checked = children[2]
            var lock = children[4]
            var selecting = children[3]

            selecting<HudWidget>.Active = false
            lock<HudImageWidget>.Color = #FFFFFFFF

            image<HudImageWidget>.SpriteName = recipeMap[weapon][imageIndex] as SpriteID
            text<HudLabelWidget>.Text = recipeMap[weapon][nameIndex] as text
            AddTag(editingGunChoice,weapon as text)

            // Check if crafted
            if thisEntity<PlayerInventory>.CheckHasItem(weapon) {
                lock<HudWidget>.Active = false
            } else {
                lock<HudWidget>.Active = true
            }

            if thisEntity<PlayerArmory>.CheckEquipedItem(weapon) {
                checked<HudWidget>.Active = true
            } else {
                checked<HudWidget>.Active = false
            }

            // Set previous weapon to delete tag next iteration
            prevWeapon = weapon
        }
        UpdateCraftHUD()
    }


    func SetWeaponInfo(recipe string) {
        var recipeMap = globalEntity<GlobalCrafting>.GetRecipeMap()
        var recipeMatMap = globalEntity<GlobalCrafting>.GetRecipeMaterial(recipe)
        var matOrder = globalEntity<GlobalMaterial>.GetMatOrder()

        var gunInfoHolder = GetChildren(GetCraftHUDWidget(EResource_UI_CRAFTING.PIVOT_GUN_INFO))
        var gunInfo = GetChildren(gunInfoHolder[0])
        var matLayout = GetChildren(gunInfoHolder[1])
        var matTemplate = matLayout[0]
        var editingMat = matTemplate

        var ErrorCode = 0

        // Turn on Weapon info and craft btn
        GetCraftHUDWidget(EResource_UI_CRAFTING.PIVOT_GUN_INFO)<HudWidget>.Active = true
        GetCraftHUDWidget(EResource_UI_CRAFTING.BTN_CRAFT)<HudWidget>.Active = true
        GetCraftHUDWidget(EResource_UI_CRAFTING.BTN_EQUIP)<HudWidget>.Active = true

        var gunAura = gunInfo[0]
        var gunImage = gunInfo[1]
        var gunText = gunInfo[2]

        gunImage<HudImageWidget>.SpriteName = recipeMap[recipe][1] as SpriteID
        gunAura<HudImageWidget>.Color = globalEntity<GlobalCrafting>.GetTierColor(recipeMap[recipe][0] as int) as Color
        if globalEntity<GlobalCrafting>.CheckIsGun(recipe) {
            gunImage<HudWidget>.Angle = 45
        } else {
            gunImage<HudWidget>.Angle = 0
        }

        for key,mat in matLayout {
            if key != 0 {
                DeleteEntity(mat)
            }
        }

        var index = 0
        for key, mat in matOrder {
            if !Contains(GetAllKeys(recipeMatMap),mat){
                continue
            }

            if index != 0 {
                CloneEntity(out var clonedentity,editingMat)
                editingMat = clonedentity as entity<HudWidget>
            }

            var children = GetChildren(editingMat)
            var matImage = children[0]
            var matName = children[1]
            var matAmount = children[2]

            matName<HudLabelWidget>.Text = globalEntity<GlobalMaterial>.GetMaterialName(mat)
            matImage<HudImageWidget>.SpriteName = globalEntity<GlobalMaterial>.GetMaterialIcon(mat) as SpriteID
            matAmount<HudLabelWidget>.Text = recipeMatMap[mat]

            if thisEntity<PlayerCrafting>.CheckHasEnoughOneMaterial(recipe,mat) {
                matAmount<HudLabelWidget>.Color = #FFFFFFFF
            } else {
                matAmount<HudLabelWidget>.Color = #D30000FF
            }
            index++ 
        }

        // Set color of crating btn
        var craftingBtn = GetCraftHUDWidget(EResource_UI_CRAFTING.BTN_CRAFT)
        var equipBtn = GetCraftHUDWidget(EResource_UI_CRAFTING.BTN_EQUIP)
        var craftingAttachmentBtn = GetCraftHUDWidget(EResource_UI_CRAFTING.BTN_ATTACHMENT_CRAFT)

        // Reset Btn
        GetChildByIndex(equipBtn,0)<HudLabelWidget>.Text = MyResources.Localizations["EQUIP"]
        craftingAttachmentBtn<HudWidget>.Active = false

        if thisEntity<PlayerInventory>.CheckHasItem(recipe){
            craftingBtn<HudButtonWidget>.Color = #4B4B4BFF
            if thisEntity<PlayerArmory>.CheckEquipedItem(recipe){
                equipBtn<HudButtonWidget>.Color = #D30000FF
                GetChildByIndex(equipBtn,0)<HudLabelWidget>.Text =  MyResources.Localizations["UNEQUIP"]
            } else {
                equipBtn<HudButtonWidget>.Color = #24B200FF
            }

        } else if !thisEntity<PlayerCrafting>.CheckHasRequirement(recipe){
            craftingBtn<HudButtonWidget>.Color = #4B4B4BFF
            equipBtn<HudButtonWidget>.Color = #4B4B4BFF
            ErrorCode = 2

        } else {
            craftingBtn<HudButtonWidget>.Color = #FAB41BFF
            equipBtn<HudButtonWidget>.Color = #4B4B4BFF

            if !thisEntity<PlayerCrafting>.CheckHasEnoughMaterial(recipe) {
                ErrorCode = 1
            }
        }

        if !globalEntity<GlobalCrafting>.CheckIsGun(recipe) {
            equipBtn<HudButtonWidget>.Color = #4B4B4BFF
            if ErrorCode == 0 {
                ErrorCode = 3
            }
            
        }

        // 
        DisplayErrorStatus(ErrorCode)

        // Set chosen weapon
        _chosenWeapon = recipe

    }

    func UpdateCraftHUD() {
        var gunLayout = GetCraftHUDWidget(EResource_UI_CRAFTING.LAYOUT_GUN)
        var craftbtn = GetCraftHUDWidget(EResource_UI_CRAFTING.BTN_CRAFT)
        _unlockable = false

        craftbtn<HudButtonWidget>.Color = #4B4B4BFF

        for key, gun in GetChildren(gunLayout) {
            var children = GetChildren(gun)
            var checked = children[2]
            var lock = children[4]
            if thisEntity<PlayerInventory>.CheckHasItem(gun<Entity>.TagsList[0]){
                
                lock<HudWidget>.Active = false
                lock<HudImageWidget>.Color = #FFFFFFFF
                // gun<HudButtonWidget>.Alpha = 1
            } else if thisEntity<PlayerInventory>.CheckHasRequirement(gun<Entity>.TagsList[0]) {
                lock<HudWidget>.Active = true
                if thisEntity<PlayerCrafting>.CheckHasEnoughMaterial(gun<Entity>.TagsList[0]){
                    lock<HudImageWidget>.Color = #FAB41BFF
                    if !Contains(_unlockableList,gun<Entity>.TagsList[0]) {
                        Append(_unlockableList,gun<Entity>.TagsList[0])
                        _unlockable = true
                    }
                }
                // gun<HudButtonWidget>.Alpha = 1
            }

            if thisEntity<PlayerArmory>.CheckEquipedItem(gun<Entity>.TagsList[0]) {
                checked<HudWidget>.Active = true
                
             } else {
                checked<HudWidget>.Active = false
            }
        }
        if _unlockable {
            DispatchEvent(PlayerCraftHUD_HasNewUnlockable,thisEntity<Player> as entity<Player>,_unlockableList)
        }

        UpdateEquipBtn()
    }

    func UpdateEquipBtn() {
        var equipBtn = GetCraftHUDWidget(EResource_UI_CRAFTING.BTN_EQUIP)
        if thisEntity<PlayerArmory>.CheckEquipedItem(_chosenWeapon) {
            equipBtn<HudButtonWidget>.Color = #D30000FF
            GetChildByIndex(equipBtn,0)<HudLabelWidget>.Text = MyResources.Localizations["UNEQUIP"]
        } else {
            equipBtn<HudButtonWidget>.Color = #24B200FF
            GetChildByIndex(equipBtn,0)<HudLabelWidget>.Text = MyResources.Localizations["EQUIP"]
        }
    }

    func DisplayErrorStatus(ErrorCode int) {
        var errorPlaceHolder = GetCraftHUDWidget(EResource_UI_CRAFTING.STATUS)
        var errorText = GetChildren(errorPlaceHolder)[2]

        if ErrorCode == 0 {
            errorPlaceHolder<HudWidget>.Active = false
            return
        } else if ErrorCode == 1 {
            errorText<HudLabelWidget>.Text = MyResources.Localizations["ECODE_1"]
        } else if ErrorCode == 2 {
            errorText<HudLabelWidget>.Text = MyResources.Localizations["ECODE_2"]
        } else if ErrorCode == 3{
            errorText<HudLabelWidget>.Text = MyResources.Localizations["ECODE_3"]
        }

        errorPlaceHolder<HudWidget>.Active = true

    }

    func UpdateTabStatus(button entity<HudWidget>) {
        var btnList = List<entity<HudWidget>>{GetCraftHUDWidget(EResource_UI_CRAFTING.TAB_AR),GetCraftHUDWidget(EResource_UI_CRAFTING.TAB_SMG),GetCraftHUDWidget(EResource_UI_CRAFTING.TAB_SG),GetCraftHUDWidget(EResource_UI_CRAFTING.TAB_SNIPER),GetCraftHUDWidget(EResource_UI_CRAFTING.TAB_HG),GetCraftHUDWidget(EResource_UI_CRAFTING.TAB_ML),GetCraftHUDWidget(EResource_UI_CRAFTING.TAP_ATTACH)}

        for key, btn in btnList {
            if btn == button {
                btn<HudButtonWidget>.Color = #D7D7D7FF
                var gunImage = GetChildren(btn)[0]
                gunImage<HudImageWidget>.Color = #1A1A1AFF
            } else {
                btn<HudButtonWidget>.Color = #1A1A1AFF
                var gunImage = GetChildren(btn)[0]
                gunImage<HudImageWidget>.Color = #FFFFFFFF
            }
        }
        
    }

    func GetChosenWeapon() string {
        return _chosenWeapon
    }

    func SetCrafted(button entity<HudButtonWidget>) {
        var craftedStatus = GetChildren(button)[2]
        craftedStatus<HudWidget>.Active = true
    }

    func CheckUnlockable() bool {
        return _unlockable
    }

    
}