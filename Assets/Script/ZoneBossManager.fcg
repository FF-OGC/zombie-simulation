import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "./GlobalZoneBossManager.fcg" as GlobalZoneBossManager
import "Playable.fcc" as playable
import "List.fcc" as list
import "./Boss.fcg" as Boss
import MyResources from "EditorGenLib.fcc"
import "./GlobalZoneSelection.fcg" as GlobalZoneSelection
import "./GlobalExpenditionLocation.fcg" as GlobalExpeditionLocation
import "Combat.fcc" as Combat

graph ZoneBossManager {
    X_DELTA float = 10.0
    Z_DELTA float = 10.0
    
    _type int
    _totalCount int
    _bossList List<entity<Entity>>
    _isSpawning bool
    _zoneEnum string
    _hasInit bool

    event OnAwake() {
        LogInfo("[ZoneBossManager] new manager: " + thisEntity<Entity>)
        BeginBossSpawning()
    } 

    func InitZoneBossManager(){
        if(!_hasInit){
            //The check exist due to not being able to set default enum value.
            _type = thisEntity<BossSpawner>.Type
            if(_type == 0){
                _type = BossEnum.MECHANICAL_SPIDER
            }
            _totalCount = thisEntity<BossSpawner>.TotalCount
            _zoneEnum = thisEntity<BossSpawner>.ZoneEnum
            _bossList = List<entity<Entity>>{}

            _isSpawning = true
            _hasInit = true
        }
    }

    func BeginBossSpawning(){
        InitZoneBossManager()
        globalEntity<GlobalZoneBossManager>.InsertZoneSpawnList(thisEntity<BossSpawner>)
    }

    async func SpawningLoopContent(){
        InitZoneBossManager()
        LogInfo("[ZoneBossManager] SpawningLoopContent")
        // This is here since it does not init some time
        if(_bossList == nil){
            _bossList = List<entity<Entity>>{}
        }

        if(!_isSpawning){
            return
        }

        // LogInfo("[ZoneBossManager] exceed: " + _bossList + " " + _type + " " + GetBossSpawnCount() + " " + (GetBossSpawnCount() >= _totalCount))
        // If exceed the total boss count of the current zone
        if(GetBossSpawnCount() >= _totalCount){
            return
        }
        
        var spawnLocation = GetSpawnLocation()
        CreateFromPrefab(out var createdEntity, globalEntity<GlobalZoneBossManager>.GetTypePrefab(_type))

        if(createdEntity == nil){
            return 
        }

        InsertBossToList(createdEntity)
        createdEntity<Transform>.Position = spawnLocation
        createdEntity<Boss>.SetSpawner(thisEntity<BossSpawner>)
        // LogInfo("[ZoneBossManager] _bossList: "  + thisEntity<Entity>.Name + " " + _bossList + " " + spawnLocation)
        WaitForNextFrame()
    }
    
    func EliminateAllBossInCurrentZone(){
        var empty = MyResources.SceneObjects["EMPTY_BOSS"] as entity<Transform>
        LogInfo("[ZoneBossManager] empty: " + MyResources.SceneObjects["EMPTY_BOSS"])
        for i = 0, Length(_bossList), 1{
            var boss = _bossList[i]
            Kill(boss as entity<CombatEntity>)
            SetParent(empty, boss as entity<Transform>, true)
        }
        LogInfo("[ZoneBossManager] childrenListBefore: " + GetChildren(empty))
        DeleteAllChildren(empty)
        LogInfo("[ZoneBossManager] _bossList: " + _bossList)
        LogInfo("[ZoneBossManager] childrenListAfter: " + GetChildren(empty))
    }

    func EndBossSpawningLoopContent(){
        _isSpawning = false
    }

    func GetBossType() int{
        return _type
    }

    func GetSpawnLocation() Vector3{
        return thisEntity<Transform>.Position
    }

    func GetBossSpawnCount() int{
        return Length(_bossList)
    }

    func GetZoneName() string{
        var zoneName = globalEntity<GlobalExpeditionLocation>.GetLocationName(_zoneEnum)
        return zoneName 
    }

    func GetZoneEnum() string{
        return _zoneEnum
    }

    func InsertBossToList(boss entity<Entity>){
        if(Contains(_bossList, boss)){
            return
        }

        Append(_bossList, boss)
        globalEntity<GlobalZoneBossManager>.IncrementTotalBossCount()
        // LogInfo("[ZoneBossManager] _bossList: " + _mobList)
    }

    func RemoveBossFromList(boss entity<Entity>){
        Delete(_bossList, boss)
        globalEntity<GlobalZoneBossManager>.DecrementTotalBossCount()
        // LogInfo("[ZoneBossManager] _bossList: " + _mobList)
    }
}