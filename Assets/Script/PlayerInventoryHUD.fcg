import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "Hud.fcc" as hud
import "./HUDUtil.fcg" as HUDUtil
import Resources from "EditorGenLib.fcc"
import "./PlayerInventory.fcg" as PlayerInventory
import "Convert.fcc" as Convert
import "./GlobalMaterial.fcg" as GlobalMaterial
import "Math.fcc" as math 
import "./PlayerMoney.fcg" as PlayerMoney

graph PlayerInventoryHUD {
    OBTAIN_X_DELTA = 75
    OBTAIN_Y_DELTA = 50
    _materialTxtMap Map<string, entity<HudWidget>>
    _hasInit bool
    _inventoryHUD entity<CustomHud>

    func InitInventoryHUD(){
        if(_inventoryHUD == nil){
            _inventoryHUD = HUDUtil.CreateCustomHUD(thisEntity<Player>, EResource_UI.INVENTORY, 10)
            _inventoryHUD<CustomHud>.Visibility = false
        }

        if(!_hasInit){
            _materialTxtMap = Map<string, entity<HudWidget>>{}
            _materialTxtMap[MaterialEnum.BOSS_ESSENCE] = GetInventoryHUDWidget(EResource_UI_INVENTORY.TXT_BOSS_ESSENCE)
            _materialTxtMap[MaterialEnum.ZOMBIE_ESSENCE] = GetInventoryHUDWidget(EResource_UI_INVENTORY.TXT_ZOMBIE_ESSENCE)
            _materialTxtMap[MaterialEnum.PET_ESSENCE] = GetInventoryHUDWidget(EResource_UI_INVENTORY.TXT_PET_ESSENCE)
            _materialTxtMap[MaterialEnum.GOLD] = GetInventoryHUDWidget(EResource_UI_INVENTORY.TXT_COIN)
            _hasInit = true
        }
    }

    func DisplayInventoryHUD(){
        InitInventoryHUD()
        ResetInventoryHUD()
        if(!_inventoryHUD<CustomHud>.Visibility){
            _inventoryHUD<CustomHud>.Visibility = true
        }
    }

    func CloseInventoryHUD(){
        if(_inventoryHUD != nil){
            _inventoryHUD<CustomHud>.Visibility = false
        }
    }

    func ResetInventoryHUD(){
        UpdateAllInventory()
    }

    func DeleteInventoryHUD(){
        DeleteEntity(_inventoryHUD)
    }

    func ToggleInventory(){
        // var pivotInventory = GetInventoryHUDWidget(EResource_UI_INVENTORY.PIVOT_INVENTORY)
        // if(pivotInventory<HudWidget>.Active){
        //     pivotInventory<HudWidget>.Active = false
        // } else {
        //     pivotInventory<HudWidget>.Active = true
        // }
    }

    func UpdateInventory(materialEnum string){
        var txt = _materialTxtMap[materialEnum]
        var content = thisEntity<PlayerInventory>.GetItemAmount(materialEnum)
        txt<HudLabelWidget>.Text = ToString(content)
    }

    func UpdateAllInventory(){
        for key, material in globalEntity<GlobalMaterial>.GetMaterialList(){
            if(material == MaterialEnum.GOLD){
                continue
            }
            UpdateInventory(material)
        }
        UpdateCoin()
    }

    func UpdateCoin(){
        InitInventoryHUD()
        var txt = _materialTxtMap[MaterialEnum.GOLD]
        var content = thisEntity<PlayerMoney>.GetMoney(GameMoneyType.COIN)
        txt<HudLabelWidget>.Text = ToString(content)
    }

    func GetInventoryHUDWidget(eResourceUIInventory string) entity<HudWidget>{
        return GetWidgetFromCustomHud(thisEntity<Player>, _inventoryHUD, Resources.UI_INVENTORY[eResourceUIInventory])
    }

    func GetObtainHUDWidget(obtainHUD entity<CustomHud>, eResourceObtain string) entity<HudWidget>{
        return GetWidgetFromCustomHud(thisEntity<Player>, obtainHUD, Resources.UI_OBTAIN[eResourceObtain])
    }

    async func DisplayObtainHUD(materialEnum string, amount int){
        var obtainHUD = HUDUtil.CreateCustomHUD(thisEntity<Player>, EResource_UI.OBTAIN, 4)
        var pivot = GetObtainHUDWidget(obtainHUD, EResource_UI_OBTAIN.PIVOT_OBTAIN)
        var position = pivot<HudWidget>.AnchorPosition
        var randomX = RandomInt(-OBTAIN_X_DELTA, OBTAIN_X_DELTA)
        var randomY = RandomInt(-OBTAIN_Y_DELTA, OBTAIN_Y_DELTA)
        var newPosition = Vector3{position.X + randomX, position.Y + randomY, position.Z}
        var txtAmount = GetChildByIndex(pivot, 0) as entity<HudLabelWidget>
        var imgIcon = GetChildByIndex(txtAmount, 0) as entity<HudImageWidget>
        var icon = globalEntity<GlobalMaterial>.GetMaterialIcon(materialEnum)
        var amountStr = "+ " + ToString(amount)

        txtAmount<HudLabelWidget>.Text = amountStr
        imgIcon<HudImageWidget>.SpriteName = icon as SpriteID
        pivot<HudWidget>.AnchorPosition = newPosition

        WaitForSeconds(1500)
        DeleteEntity(obtainHUD)
    }
}