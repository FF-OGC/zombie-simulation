import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "Map.fcc" as map
import "List.fcc" as List
import "Database.fcc" as Database
import Resources from "EditorGenLib.fcc"

graph GlobalLevel {
    EXP_MIN int = 0

    _levelExpMap Map<int, int>
    _levelExpList List<List<object>>
    _levelList List<int>
    _hasInit bool

    func InitGlobalLevel(){
        if(!_hasInit){
            SetLevelExp()
            _hasInit = true
        }
    }

    func SetLevelExp(){
        _levelExpMap = Map<int, int>{}
        _levelList = List<int>{}
        _levelExpList = ReadCSV(Resources.CSV[EResource_CSV.PLAYER_EXP_REQUIREMENT])
        LogInfo("[GlobalLevel] _levelExpList: " + _levelExpList)
        for i = 2, List.Length(_levelExpList), 1{
            var list = _levelExpList[i]
            Append(_levelList, list[0] as int)
            _levelExpMap[list[0] as int] = list[1] as int
        }
        LogInfo("[GlobalLevel] _levelExpMap: " + _levelExpMap)
    }

    func GetLevelExpRequirement(level int) int{
        InitGlobalLevel()
        return _levelExpMap[level]
    }
    
    func GetLevelList() List<int>{
        InitGlobalLevel()
        return _levelList
    }

    func GetMaxLevel() int{
        InitGlobalLevel()
        Max(GetLevelList(), out var isSuceed, out var maxLvl)
        return maxLvl as int
    }

    func GetMaxExpRequired() int{
        InitGlobalLevel()
        return _levelExpMap[GetMaxLevel()]
    }

}