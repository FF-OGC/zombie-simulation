import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "./PlayerZoneSelectionHUD.fcg" as PlayerZoneSelectionHUD
import "Hud.fcc" as hud
import "AI.fcc" as ai
import "Player.fcc" as player
import "./GlobalZoneSelection.fcg" as GlobalZoneSelection
import MyResources from "EditorGenLib.fcc"
import "./GlobalDebug.fcg" as GlobalDebug
import "./GlobalZoneMobManager.fcg" as GlobalZoneMobManager

graph PlayerZoneSelection {
    _buttonZoneMap Map<entity<HudButtonWidget>, string>
    _zoneImgChosenMap Map<string, entity<HudWidget>>
    _selectedZone string
    _hasInit bool
    _isTeleporting bool

    func InitZoneSelection(){
        if(!_hasInit){
            var zoneList = globalEntity<GlobalZoneSelection>.GetZoneList()
            var bossZoneList = globalEntity<GlobalZoneSelection>.GetBossZoneList()
            var mobZoneList = globalEntity<GlobalZoneSelection>.GetMobZoneList()
            _buttonZoneMap = Map<entity<HudButtonWidget>, string>{}
            _zoneImgChosenMap = Map<string, entity<HudWidget>>{}
            for key, zone in zoneList{
                _buttonZoneMap[thisEntity<PlayerZoneSelectionHUD>.GetZoneButton(zone)] = zone
                _zoneImgChosenMap[zone] = thisEntity<PlayerZoneSelectionHUD>.GetZoneChosenImg(zone)
            } 
            _hasInit = true
        }
    }

    func ResetZoneSelecion(){
        _selectedZone = ZoneEnum.NONE
    }

    func BeginZoneSelection(){
        InitZoneSelection()
        ResetZoneSelecion()
        // Show HUD
        thisEntity<PlayerZoneSelectionHUD>.DisplayZoneSelectionHUD()
    }

    func EndZoneSelection(){
        // HideHUD
        thisEntity<PlayerZoneSelectionHUD>.CloseZoneSelectionHUD()
    }

    func ConfirmZoneSelection(){
        if(_selectedZone == ZoneEnum.NONE){
            ShowTips(thisEntity<Player>, MyResources.Localizations["ZONE_SELECTION_NO_ZONE_SELECTED"], ColorRGB(255, 255, 255), 3000)
            return 
        }

        if(_isTeleporting){
            ShowTips(thisEntity<Player>, MyResources.Localizations["ZONE_SELECTION_IS_TELEPORTING"], ColorRGB(255, 255, 255), 3000)
            return
        }

        // Visual effects
        SetTeleportingVFX()

        // Teleport player to someplace
        start TeleportPlayerToZone() 
        
        EndZoneSelection()
    }

    func SetTeleportingVFX(){

    }

    func StopPlayerFromTeleporting(){
        _isTeleporting = false
    }

    async func TeleportPlayerToZone(){
        _isTeleporting = true

        if(globalEntity<GlobalDebug>.IsShortTeleport){
            WaitForNextFrame()
        } else {
            WaitForSeconds(5000)
        }

        // This should only be possible if player died before being teleported.
        if(!_isTeleporting){
            return
        }

        // Check for distance to start spawning zombie
        globalEntity<GlobalZoneMobManager>.NotifyDistanceChecking(thisEntity<Player>)

        Teleport(thisEntity<Player>, globalEntity<GlobalZoneSelection>.GetZoneTeleportLocation(_selectedZone) + Vector3{0, 2, 0}, Vector3{0, 0, 0})
        
        StopPlayerFromTeleporting()
    }

    func SetSelectedZone(button entity<HudButtonWidget>){
        LogInfo("[PlayerZoneSelection] _selectedZone. " + _selectedZone)
        if(_selectedZone != ZoneEnum.NONE){
            thisEntity<PlayerZoneSelectionHUD>.SetActiveZone(_selectedZone, false) 
            thisEntity<PlayerZoneSelectionHUD>.SetSpriteActiveBtnConfirm(false)
        }
        _selectedZone = _buttonZoneMap[button]
        thisEntity<PlayerZoneSelectionHUD>.SetActiveZone(_selectedZone, true) 
        thisEntity<PlayerZoneSelectionHUD>.SetSpriteActiveBtnConfirm(true)
        LogInfo("[PlayerZoneSelection] _selectedZone. " + _selectedZone)
    }

    func SetSelectedZoneManually(zoneEnum string){
        _selectedZone = zoneEnum
    }

    func GetSelectedZone() int{
        return _selectedZone
    }

    func GetZoneImgChosenMap() Map<string, entity<HudWidget>>{
        return _zoneImgChosenMap
    }
}