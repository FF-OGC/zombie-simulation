import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "Hud.fcc" as hud
import Resources from "EditorGenLib.fcc"
import "./HUDUtil.fcg" as HUDUtil

graph PlayerDebugHUD {
    _debugHUD entity<CustomHud>

    func InitDebugHUD(){
        if(_debugHUD == nil){
            _debugHUD = HUDUtil.CreateCustomHUD(thisEntity<Player>, EResource_UI.DEBUG, 4)
            _debugHUD<CustomHud>.Visibility = false
        }
    }

    func DisplayDebugHUD(){
        InitDebugHUD()
        ResetDebugHUD()
        if(!_debugHUD<CustomHud>.Visibility){
            _debugHUD<CustomHud>.Visibility = true
        }
    }

    func ResetDebugHUD(){
        
    }

    func CloseDebugHUD(){
        if(_debugHUD != nil){
            _debugHUD<CustomHud>.Visibility = false
        }
    }

    func DeleteDebugHUD(){
        DeleteEntity(_debugHUD)
    }

    func SetMaxZombieCount(){
        
    }

    func ToggleActivityDebugMenu(){
        var pivotDebugMenu = GetDebugHUDWidget(EResource_UI_DEBUG.PIVOT_DEBUG_MENU)
        if(pivotDebugMenu<HudWidget>.Active){
            SetActivityDebugMenu(false)
        } else {
            SetActivityDebugMenu(true)
        }
    }

    func SetActivityDebugMenu(active bool){
        var pivotDebugMenu = GetDebugHUDWidget(EResource_UI_DEBUG.PIVOT_DEBUG_MENU)
        if(active){
            pivotDebugMenu<HudWidget>.Active = true
        } else {
            pivotDebugMenu<HudWidget>.Active = false
        }
    }

    func GetDebugHUDWidget(eResourceUIDebug string) entity<HudWidget>{
        return GetWidgetFromCustomHud(thisEntity<Player>, _debugHUD, Resources.UI_DEBUG[eResourceUIDebug])
    }
}