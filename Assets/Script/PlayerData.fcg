import "StdLibrary.fcc" as std
import "List.fcc" as list 
import "./PlayerMoney.fcg" as PlayerMoney
import "EditorGenLib.fcc" as editorGenLib 
import "Database.fcc" as database 
import "Player.fcc" as player 
import "Economy.fcc" as economy 
import "Math.fcc" as math 
import "./PlayerStat.fcg" as PlayerStat
import "./PlayerLevel.fcg" as PlayerLevel

graph PlayerData {
    _lastLoginTime int
    _currentReadPos int
    _currentCoin int

    _exp int
    _statPointList List<int>

    func ReadDataInteger(data List<object>, defaultValue int) int {
        var returnValue = defaultValue
        if (data[_currentReadPos] != nil) {
            returnValue = data[_currentReadPos] as int
            _currentReadPos = _currentReadPos + 1
        }
        return returnValue
    }

    func InitGenericData() {
        //Init default data
        _lastLoginTime = 0
        _currentCoin = 0
    }
    
    func ReadGenericData(data List<object>) {
        _currentReadPos = 0
        InitGenericData()

        if (data == nil) {
            return
        }

        LogInfo("[PlayerData] ReadGenericData = " + data)

        //Load all data from data table
        _currentCoin = ReadDataInteger(data, 0)
        _lastLoginTime = ReadDataInteger(data, 0)
    }

    func InitStatData(){
        _exp = 0
        _statPointList = List<int>{}
    }

    func ReadStatData(data List<object>){
        _currentReadPos = 0
        InitStatData()
        if(data == nil){
            return 
        }
        
        LogInfo("[PlayerData] ReadStatData = " + data)

        _exp = ReadDataInteger(data, 0)
        for i = 0, list.Length(data) - 1, 1{
            var stat = ReadDataInteger(data, 0)
            Append(_statPointList, stat)
        }
    }

    async func LoadData() {
        LogInfo("[PlayerData] LoadData = " + thisEntity<Player>)
        //Generic data            
        wait ReadFromDatabase(DataEnum.PLAYER_DATA_TABLE, thisEntity<Player>.UserUID, DataEnum.GENERIC_DATA, out var genericData, "")
        ReadGenericData(genericData as List<object>)

        wait ReadFromDatabase(DataEnum.PLAYER_DATA_TABLE, thisEntity<Player>.UserUID, DataEnum.STAT_DATA, out var statData, "")
        ReadStatData(statData as List<object>)
        
        //Daily data reset
        CheckResetDaily()
        //dispatch load data success event
        DispatchEvent(Player_FinishAction, thisEntity<Player>, List<object>{DataEnum.ACTION_LOAD_DATA_SUCCESS, nil})
    }

    func GetDataFromUsers() {
        //Get data from other component
        _currentCoin = thisEntity<PlayerMoney>.GetMoney(GameMoneyType.COIN)
        _exp = thisEntity<PlayerLevel>.GetExp()
        _statPointList = thisEntity<PlayerStat>.GetStatListFromStatMap()
        LogInfo("[PlayerData] GetDataFromUsers: " + _currentCoin)
    }

    func PrepareData() List<int> {
        var playerData = List<int>{}
        Append(playerData, _currentCoin)
        Append(playerData, _lastLoginTime)
        return playerData
    }

    func PrepareStatData() List<int>{
        var statData = List<int>{}
        Append(statData, _exp)
        AppendRange(statData, _statPointList)
        return statData
    }

    async func WriteData() {
        GetDataFromUsers()
        var playerData = PrepareData()
        var statData = PrepareStatData()
        LogInfo("[PlayerData] WriteData playerData = " + playerData)
        WriteToDatabase(DataEnum.PLAYER_DATA_TABLE, thisEntity<Player>.UserUID, DataEnum.GENERIC_DATA, playerData, "") 
        WriteToDatabase(DataEnum.PLAYER_DATA_TABLE, thisEntity<Player>.UserUID, DataEnum.STAT_DATA, statData, "") 
    }

    func AreDatesDifferent(timeStamp1 int, timeStamp2 int) bool{
        var secondsInMinute = 60
        var minutesInHour = 60
        var hoursInDay = 24
        var secondsInDay = secondsInMinute * minutesInHour * hoursInDay
        var dayNumber1 = timeStamp1 / secondsInDay
        var dayNumber2 = timeStamp2 / secondsInDay
        return (dayNumber1 != dayNumber2)
    }

    func CheckResetDaily(){
        var loginTime = GetServerTime()
        LogInfo("[PlayerData] loginTime: " + loginTime)
        LogInfo("[PlayerData] _lastLoginTime: " + _lastLoginTime)
        if(AreDatesDifferent(loginTime, _lastLoginTime)){
            _lastLoginTime = loginTime
            ResetDataDaily()
        }
    }

    func ResetDataDaily(){
    }

    async func Debug_ResetData(){
        _currentCoin = 0
        _exp = 0
        thisEntity<PlayerMoney>.ConsumeMoney(GameMoneyType.COIN, thisEntity<PlayerMoney>.GetMoney(GameMoneyType.COIN))
        thisEntity<PlayerLevel>.DecreaseExpByAmount(thisEntity<PlayerLevel>.GetExp())
        WriteData()
    }

    event Player_PlayerJoinGame() {

    }

    event Player_PlayerQuitGame() {
        // LogInfo("[PlayerData] Player_PlayerQuitGame = " + thisEntity<Player>)
        start WriteData()
    }
}