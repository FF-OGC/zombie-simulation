import "Convert.fcc" as convert
import "List.fcc" as list
import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import Resources from "EditorGenLib.fcc"
import "./ZoneBossManager.fcg" as ZoneBossManager
import "Math.fcc" as Math
import "./PlayerBossNotification.fcg" as PlayerBossNotification
import "./PlayerDefaultHUD.fcg" as PlayerDefaultHUD

graph GlobalZoneBossManager {
    GLOBAL_SPAWN_INTERVAL int = 300 // 300 seconds
    GLOBAL_FIRST_BOSS_SPAWN_TIME int = 20 // 60 seconds
    GLOBAL_BOSS_COUNT_MAX int = 1

    _hasInit bool
    _isFirstBoss bool = true
    _typePrefabMap Map<int, PrefabID>
    _bossSpawnList List<entity<Entity>>
    _totalBossCount int

    func InitGlobalZoneBossManager(){
        var prefabID = ToString(Resources.Prefab[EResource_Prefab.MECHANICAL_SPIDER_BOSS])
        if(prefabID != nil){
            SetTypePrefabMap()
        }

        if(!_hasInit){
            _totalBossCount = 0
            _hasInit = true
        }
    }

    func EliminateAllBoss(){
        for i = 0, Length(_bossSpawnList), 1{
            var bossSpawn = _bossSpawnList[i]
            bossSpawn<ZoneBossManager>.EliminateAllBossInCurrentZone()
        }
    }

    func GlobalZoneSpawnLoopContent(loopCount int){
        InitGlobalZoneBossManager()

        if(!_isFirstBoss || loopCount % GLOBAL_FIRST_BOSS_SPAWN_TIME != 0){
            // Check if this is the loop to spawn 
            if(loopCount % GLOBAL_SPAWN_INTERVAL != 0){
                return
            }
        }

        

        // if(loopCount % GLOBAL_FIRST_BOSS_SPAWN_TIME != 0 && _isFirstBoss){
        //     return
        // }
        // Update timer
        for key, player in GetAllPlayers(){
        }

        LogInfo("[GlobalZoneBossManager] IsLooping: " + _totalBossCount + " " + GLOBAL_BOSS_COUNT_MAX)
        EliminateAllBoss()

        // TODO: Show HUD notification to all player
        var count = 0
        while(_totalBossCount < GLOBAL_BOSS_COUNT_MAX){
            if(count >= 100){
                break
            }
            count++
            
            var randomIndex = RandomInt(0, Length(_bossSpawnList))
            var randomBossSpawner = _bossSpawnList[randomIndex]

            for key, player in GetAllPlayers(){
                player<PlayerBossNotification>.SetBossSpawnZoneEnum(randomBossSpawner<ZoneBossManager>.GetZoneEnum())
                // player<PlayerBossNotification>
                player<PlayerBossNotification>.BeginBossNotification()
                player<PlayerDefaultHUD>.SetBossResetTimerHUD()
                player<PlayerDefaultHUD>.SetBossResetSubtitle()
            }
            start randomBossSpawner<ZoneBossManager>.SpawningLoopContent()
            // LogInfo("[GlobalZoneBossManager] randomZoneName: " + randomBossSpawner<ZoneBossManager>.GetZoneName())
        }
        _isFirstBoss = false
        // LogInfo("[GlobalZoneBossManager] LoopContent: " + _bossSpawnList)
        // // Loop through each spawn zone to call the its loop content
        // for i = 0, Length(_bossSpawnList), 1{
        //     var bossSpawn = _bossSpawnList[i]
        //     // bossSpawn<ZoneBossManager>.MobStuckCheckLoopContent()
        //     start bossSpawn<ZoneBossManager>.SpawningLoopContent()
        // }
    }

    func SetTypePrefabMap(){
        if(_typePrefabMap != nil){
            return 
        }

        _typePrefabMap = Map<int, PrefabID>{}
        _typePrefabMap[BossEnum.MECHANICAL_SPIDER] = Resources.Prefab[EResource_Prefab.MECHANICAL_SPIDER_BOSS]
        _typePrefabMap[BossEnum.DRAGON] = Resources.Prefab[EResource_Prefab.DRAGON]
    }

    func GetTypePrefab(bossEnum int) PrefabID{
        InitGlobalZoneBossManager()
        return _typePrefabMap[bossEnum]
    }

    func GetBossSpawnList() List<entity<Entity>>{
        return _bossSpawnList
    }

    func IncrementTotalBossCount(){
        _totalBossCount += 1
        LogInfo("[GlobalZoneBossManager] _totalBossCount: " + _totalBossCount)
    }
    
    func DecrementTotalBossCount(){
        _totalBossCount -= 1
        if(_totalBossCount <= 0){
            _totalBossCount = 0
            for key, player in GetAllPlayers(){
                player<PlayerBossNotification>.OnNoBossOnField()
            }
        }
        LogInfo("[GlobalZoneBossManager] _totalBossCount: " + _totalBossCount)
    }

    func InsertZoneSpawnList(bossSpawner entity<BossSpawner>){
        LogInfo("[GlobalZoneBossManager] InsertZoneSpawnList: " + bossSpawner<Transform>.Position + " " + _bossSpawnList)

        if(_bossSpawnList == nil){
            _bossSpawnList = List<entity<Entity>>{}
        }

        if(Contains(_bossSpawnList, bossSpawner)){
            return
        }

        Append(_bossSpawnList, bossSpawner)
    }

    func IsBossOnField() bool{
        if (_totalBossCount > 0){
            return true
        }
        return false
    }
}