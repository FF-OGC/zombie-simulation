import "Convert.fcc" as convert
import "List.fcc" as list
import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import Resources from "EditorGenLib.fcc"
import "./ZoneBossManager.fcg" as ZoneBossManager
import "Math.fcc" as Math
import "./PlayerBossNotification.fcg" as PlayerBossNotification
import "./PlayerDefaultHUD.fcg" as PlayerDefaultHUD
import "./PlayerZoneSelectionHUD.fcg" as PlayerZoneSelectionHUD
import "./PlayerMenu.fcg" as PlayerMenu

graph GlobalZoneBossManager {
    GLOBAL_SPAWN_INTERVAL int = 300 // 300 seconds
    GLOBAL_NO_SPAWN_INTERVAL int = 300 // 300 seconds
    GLOBAL_FIRST_BOSS_SPAWN_TIME int = 20 // 60 seconds
    GLOBAL_BOSS_COUNT_MAX int = 1

    _hasInit bool
    _isFirstBoss bool = true
    _typePrefabMap Map<int, PrefabID>
    _bossSpawnList List<entity<Entity>>
    _totalBossCount int
    _currentBossEntity entity<LevelObject>
    _nextSpawner entity<Entity>
    _currentSpawner entity<Entity>
    _lastSpawnLoopCount int

    func InitGlobalZoneBossManager(){
        var prefabID = ToString(Resources.Prefab[EResource_Prefab.MECHANICAL_SPIDER_BOSS])
        if(prefabID != nil){
            SetTypePrefabMap()
        }

        if(!_hasInit){
            _totalBossCount = 0
            var randomIndex = RandomInt(0, Length(_bossSpawnList))
            _nextSpawner = _bossSpawnList[randomIndex]
            _lastSpawnLoopCount = 0
            _hasInit = true
        }
    }

    func EliminateAllBoss(){
        for i = 0, Length(_bossSpawnList), 1{
            var bossSpawn = _bossSpawnList[i]
            bossSpawn<ZoneBossManager>.EliminateAllBossInCurrentZone()
        }
    }

    func GlobalZoneSpawnLoopContent(loopCount int){
        var deduct = _lastSpawnLoopCount
        // deduct = 0
        if(_lastSpawnLoopCount == GLOBAL_FIRST_BOSS_SPAWN_TIME && (loopCount - deduct) >= (GLOBAL_NO_SPAWN_INTERVAL + GLOBAL_SPAWN_INTERVAL)){
            deduct = GLOBAL_NO_SPAWN_INTERVAL + GLOBAL_SPAWN_INTERVAL + _lastSpawnLoopCount
        }
        // LogInfo("[GlobalZoneBossManager] loopCount: " + loopCount + " " + deduct + " " + (loopCount - deduct))
        loopCount -= deduct
        InitGlobalZoneBossManager()
        
        // Update timer
        // if(!IsBossOnField()){
            for key, player in GetAllPlayers(){
                player<PlayerZoneSelectionHUD>.UpdateZoneTimer()
                player<PlayerZoneSelectionHUD>.UpdateZoneIcon()
            }
        // }
        var normalBossEliminateCondition = loopCount % GLOBAL_SPAWN_INTERVAL == 0
        // LogInfo("[GlobalZoneBossManager] elimCondition: " + normalBossEliminateCondition + " " + _lastSpawnLoopCount + " " + loopCount + " " + (loopCount + deduct) + " " + (GLOBAL_SPAWN_INTERVAL + GLOBAL_NO_SPAWN_INTERVAL) + " " + deduct)
        if(normalBossEliminateCondition){
            LogInfo("[GlobalZoneBossManager] IsLooping: " + _totalBossCount + " " + GLOBAL_BOSS_COUNT_MAX)
            EliminateAllBoss()
        }

        var firstBossBreakCondition = !_isFirstBoss || loopCount % GLOBAL_FIRST_BOSS_SPAWN_TIME != 0
        var normalBossBreakCondition = (loopCount % (GLOBAL_SPAWN_INTERVAL + GLOBAL_NO_SPAWN_INTERVAL)) != 0
        // LogInfo("[GlobalZoneBossManager] breakCondition: " + firstBossBreakCondition + " " + normalBossBreakCondition + " " + _lastSpawnLoopCount + " " + loopCount + " " + (loopCount + deduct) + " " + (GLOBAL_SPAWN_INTERVAL + GLOBAL_NO_SPAWN_INTERVAL) + " " + deduct)
        if(firstBossBreakCondition && normalBossBreakCondition){
            // Check if this is the loop to spawn 
            return
        }

        // LogInfo("[GlobalZoneBossManager] IsLooping: " + _totalBossCount + " " + GLOBAL_BOSS_COUNT_MAX)
        EliminateAllBoss()

        // LogInfo("run here")
        var count = 0
        while(_totalBossCount < GLOBAL_BOSS_COUNT_MAX){
            if(count >= 100){
                break
            }
            count++
            
            _lastSpawnLoopCount = loopCount + deduct
            _currentSpawner = _nextSpawner

            for key, player in GetAllPlayers(){
                // player<PlayerBossNotification>
                player<PlayerBossNotification>.BeginBossNotification()
                player<PlayerDefaultHUD>.SetBossResetTimerHUD()
                player<PlayerDefaultHUD>.SetBossResetSubtitle()
            }

            start _currentSpawner<ZoneBossManager>.SpawningLoopContent()

            for key, player in GetAllPlayers(){
                player<PlayerMenu>.UpdateBossNoti()
            }
            // LogInfo("[GlobalZoneBossManager] randomZoneName: " + randomBossSpawner<ZoneBossManager>.GetZoneName())
        }
        // LogInfo("[GlobalZoneBossManager] spawn: " + _totalBossCount)
        // Update next spawn zone
        var randomIndex = RandomInt(0, Length(_bossSpawnList))
        _nextSpawner = _bossSpawnList[randomIndex]

        // Indicate that a boss has already been spawned
        _isFirstBoss = false
    }

    func SetTypePrefabMap(){
        if(_typePrefabMap != nil){
            return 
        }

        _typePrefabMap = Map<int, PrefabID>{}
        _typePrefabMap[BossEnum.MECHANICAL_SPIDER] = Resources.Prefab[EResource_Prefab.MECHANICAL_SPIDER_BOSS]
        _typePrefabMap[BossEnum.DRAGON] = Resources.Prefab[EResource_Prefab.DRAGON]
    }

    func GetTypePrefab(bossEnum int) PrefabID{
        InitGlobalZoneBossManager()
        return _typePrefabMap[bossEnum]
    }

    func GetNextSpawnZone() string{
        return _nextSpawner<ZoneBossManager>.GetZoneEnum()
    }

    func GetCurrentSpawnZone() string{
        return _currentSpawner<ZoneBossManager>.GetZoneEnum()
    }

    func GetLastSpawnLoopCount() int{
        return _lastSpawnLoopCount
    }

    func GetBossSpawnList() List<entity<Entity>>{
        return _bossSpawnList
    }

    func IncrementTotalBossCount(){
        _totalBossCount += 1
        LogInfo("[GlobalZoneBossManager] _totalBossCount: " + _totalBossCount)
    }
    
    func DecrementTotalBossCount(){
        _totalBossCount -= 1
        if(_totalBossCount <= 0){
            _totalBossCount = 0
            for key, player in GetAllPlayers(){
                player<PlayerBossNotification>.OnNoBossOnField()
            }
        }
        LogInfo("[GlobalZoneBossManager] _totalBossCount: " + _totalBossCount)
    }

    func InsertZoneSpawnList(bossSpawner entity<BossSpawner>){
        LogInfo("[GlobalZoneBossManager] InsertZoneSpawnList: " + bossSpawner<Transform>.Position + " " + _bossSpawnList)

        if(_bossSpawnList == nil){
            _bossSpawnList = List<entity<Entity>>{}
        }

        if(Contains(_bossSpawnList, bossSpawner)){
            return
        }

        if(bossSpawner<BossSpawner>.ZoneEnum != ZoneEnum.WBF){
            return
        }

        Append(_bossSpawnList, bossSpawner)
    }

    func SetCurrentBossEntity(bossEntity entity<LevelObject>){
        _currentBossEntity = bossEntity
    }

    func GetCurrentBossEntity() entity<LevelObject>{
        return _currentBossEntity
    }

    func IsBossOnField() bool{
        if (_totalBossCount > 0){
            return true
        }
        return false
    }

    func IsFirstBoss() bool{
        return _isFirstBoss
    }
}