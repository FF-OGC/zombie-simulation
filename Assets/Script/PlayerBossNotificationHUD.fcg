import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "./HUDUtil.fcg" as HUDUtil
import "Hud.fcc" as Hud
import Resources from "EditorGenLib.fcc"
import "./GlobalZoneBossManager.fcg" as GlobalZoneBossManager
import "./GlobalLoop.fcg" as GlobalLoop
import "Convert.fcc" as Convert

graph PlayerBossNotificationHUD {
    _bossNotificationHUD entity<CustomHud>

    func InitBossNotificationHUD(){
        if(_bossNotificationHUD == nil){
            _bossNotificationHUD = HUDUtil.CreateCustomHUD(thisEntity<Player>, EResource_UI.BOSS_NOTIFICATION, 4) 
            _bossNotificationHUD<CustomHud>.Visibility = false
        }
    }

    func ShowBossNotificationHUD(){
        InitBossNotificationHUD()
        ResetBossNotificationHUD()
        if(!_bossNotificationHUD<CustomHud>.Visibility){
            _bossNotificationHUD<CustomHud>.Visibility = true
        }
    }

    func StartBossNotificationTimer(){

    }

    func HideBossNotificationHUD(){
        if(_bossNotificationHUD != nil){
            _bossNotificationHUD<CustomHud>.Visibility = false
        }
    }

    func DeleteBossNotificationHUD(){
        DeleteEntity(_bossNotificationHUD)
    }

    func ResetBossNotificationHUD(){
        SetPivotBossTeleport(true)
        SetPivotTimerActivity(false)
    }

    func UpdateTimer(){
        var pivotTimer = GetBossNotificationHUDWidgets(EResource_UI_BOSS_NOTIFICATION.PIVOT_TIMER)
        var txtTimer = GetChildByIndex(pivotTimer, 0) as entity<HudWidget>
        var alterTime = globalEntity<GlobalZoneBossManager>.GLOBAL_SPAWN_INTERVAL
        var remainingTimeS = alterTime  - (globalEntity<GlobalLoop>.GetLoopCount() % alterTime)
        // LogInfo("[PlayerSkybox] remainingTime s = " + remainingTimeS)
        var remainingTimeM = 0

        if(remainingTimeS > 60){
            remainingTimeM = remainingTimeS / 60
            remainingTimeS -= remainingTimeM * 60
        }

        var txtRemainingTimeM = ""
        var txtRemainingTimeS = ""
        if(remainingTimeM < 10) {
            txtRemainingTimeM = "0" + ToString(remainingTimeM)
        } else {
            txtRemainingTimeM = ToString(remainingTimeM)
        }

        if(remainingTimeS < 10) {
            txtRemainingTimeS = "0" + ToString(remainingTimeS)
        } else {
            txtRemainingTimeS = ToString(remainingTimeS)
        }

        txtTimer<HudLabelWidget>.Text = txtRemainingTimeM + ":" + txtRemainingTimeS + " Until next world boss"
    }

    func SetPivotTimerActivity(active bool){
        var pivotTimer = GetBossNotificationHUDWidgets(EResource_UI_BOSS_NOTIFICATION.PIVOT_TIMER)
        pivotTimer<HudWidget>.Active = active
    }

    func SetPivotBossTeleport(active bool){
        var pivotBossTeleport = GetBossNotificationHUDWidgets(EResource_UI_BOSS_NOTIFICATION.PIVOT_BOSS_TELEPORT)
        pivotBossTeleport<HudWidget>.Active = active
    }

    func GetBossNotificationHUDWidgets(eResourceUIBossNotification string) entity<HudWidget>{
        return GetWidgetFromCustomHud(thisEntity<Player>, _bossNotificationHUD, Resources.UI_BOSS_NOTIFICATION[eResourceUIBossNotification])
    }
}