import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "Hud.fcc" as hud
import "./PlayerZoneSelection.fcg" as PlayerZoneSelection

import Resources from "EditorGenLib.fcc"

import "./HUDUtil.fcg" as HUDUtil
import "Map.fcc" as Map
import "List.fcc" as List

graph PlayerZoneSelectionHUD {
    _zoneSelectionHUD entity<CustomHud>

    func InitZoneSelectionHUD(){
        if(_zoneSelectionHUD == nil){
            _zoneSelectionHUD = HUDUtil.CreateCustomHUD(thisEntity<Player>, EResource_UI.ZONE_SELECTION, 10)
            LogInfo("[PlayerZoneSelectionHUD] _zoneSelectionHUD: " + _zoneSelectionHUD)
            _zoneSelectionHUD<CustomHud>.Visibility = false
        }
    }

    func DisplayZoneSelectionHUD(){
        InitZoneSelectionHUD()
        ResetZoneSelectionHUD()

        if(!_zoneSelectionHUD<CustomHud>.Visibility){
            _zoneSelectionHUD<CustomHud>.Visibility = true
        }
    }

    func CloseZoneSelectionHUD(){
        if(_zoneSelectionHUD != nil){
            _zoneSelectionHUD<CustomHud>.Visibility = false
        }
    }

    func ResetAllActiveZone(){
        var zoneList = GetAllKeys(thisEntity<PlayerZoneSelection>.GetZoneImgChosenMap())
        for i = 0, List.Length(zoneList), 1{
            var zone = zoneList[i]
            SetActiveZone(zone, false)
        }
    }

    func SetActiveZone(zoneEnum string, isActive bool){
        var img = thisEntity<PlayerZoneSelection>._zoneImgChosenMap[zoneEnum]
        img<HudWidget>.Active = isActive
    }

    func SetSpriteActiveBtnConfirm(isActive bool){
        var btnConfirm = GetZoneSelectionHUDWidget(EResource_UI_ZONE_SELECTION.BTN_CONFIRM)
        if(isActive){
            btnConfirm<HudButtonWidget>.SpriteName = Resources.Texture[EResource_Texture.BTN_MID_PRESS]
            return
        }
        btnConfirm<HudButtonWidget>.SpriteName = Resources.Texture[EResource_Texture.BTN_DISABLE]
        return
    }

    func ResetZoneSelectionHUD(){
        ResetAllActiveZone()
        SetSpriteActiveBtnConfirm(false)
    }

    func DeleteZoneSelectionHUD(){
        DeleteEntity(_zoneSelectionHUD)
    }

    func GetZoneSelectionHUDWidget(eResourceUIZoneSelection string) entity<HudWidget>{
        return GetWidgetFromCustomHud(thisEntity<Player>, _zoneSelectionHUD, Resources.UI_ZONE_SELECTION[eResourceUIZoneSelection])
    }

}