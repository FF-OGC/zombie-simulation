import "StdLibrary.fcc" as stdLibrary
import "EditorGenLib.fcc" as editorGenLib
import "./GlobalCrafting.fcg" as GlobalCrafting
import "./PlayerInventory.fcg" as PlayerInventory
import "Convert.fcc" as convert
import "./PlayerData.fcg" as PlayerData
import "Items.fcc" as Items
import "./PlayerCraftHUD.fcg" as PlayerCraftHUD
import "./PlayerMoney.fcg" as PlayerMoney



graph PlayerCrafting {
    _hasInit bool
    
    func InitPlayerCrafting(){
        if(!_hasInit){
            _hasInit = true
        }
    }

    func CheckHasRequirement(RecipeEnum string) bool{
        var recipeMap = globalEntity<GlobalCrafting>.GetRecipeMap()
        if recipeMap[RecipeEnum][5] == nil {
            return true
        }
        return thisEntity<PlayerInventory>.CheckHasItem(recipeMap[RecipeEnum][5])
    }

   async func Craft(recipeEnum string){

        //Check if available
        if !thisEntity<PlayerInventory>.CheckHasItem(recipeEnum) {
            if(!CheckHasRequirement(recipeEnum)){
                ShowTips(thisEntity<Player> as entity<Player>,"Craft Previous Item First",#FFFFFFFF,3000)
                return
            }

            var recipeMatMap = globalEntity<GlobalCrafting>.GetRecipeMaterial(recipeEnum)
            var recipeMap = globalEntity<GlobalCrafting>.GetRecipeMap()
            var craftable = true


            for mat, amount in recipeMatMap {
                LogInfo(mat + ": " + amount)
                StringToInt(amount, out var amountInt, out var success)
                // thisEntity<PlayerInventory>.IncreaseItemByAmount(mat,100)

                if mat == MaterialEnum.GOLD{
                    if thisEntity<PlayerMoney>.GetMoney(GameMoneyType.COIN) < amountInt {
                        craftable = false
                        ShowTips(thisEntity<Player> as entity<Player>,"Not Enough Gold",#FFFFFFFF,3000)
                    }
                } else {
                    if thisEntity<PlayerInventory>.GetItemAmount(mat) < amountInt{
                        craftable = false
                        ShowTips(thisEntity<Player> as entity<Player>,"Not Enough Material",#FFFFFFFF,3000)
                    }
                }
            }
            // Craftable
            if craftable {
                LogInfo("Craft success")
                for mat, amount in recipeMatMap {
                    StringToInt(amount, out var amountInt, out var success)
                    if mat == MaterialEnum.GOLD{
                        thisEntity<PlayerMoney>.ConsumeMoney(GameMoneyType.COIN, amountInt)
                    }else {
                        thisEntity<PlayerInventory>.DecreaseItemByAmount(mat, amountInt)
                    }
                    
                }

                if globalEntity<GlobalCrafting>.CheckIsGun(recipeEnum) {
                    // Craft Gun
                    thisEntity<PlayerInventory>.AddGun(recipeEnum)
                } else {
                    // Craft Attachment
                    thisEntity<PlayerInventory>.AddAttachment(recipeEnum)
                    AddItemToPlayer(thisEntity<Player> as entity<Player>, recipeMap[recipeEnum][4] as ItemIDType,3,out var addedItems)
                }

                thisEntity<PlayerCraftHUD>.UpdateCraftHUD()
                thisEntity<PlayerData>.WriteData()
            } else { // Not craftable
                //display insufficient materials
                LogInfo("Craft fail")
            }
        } else {
            ShowTips(thisEntity<Player> as entity<Player>,"Already crafted",#FFFFFFFF,3000)
            LogInfo("Already crafted")
        }
    }
}